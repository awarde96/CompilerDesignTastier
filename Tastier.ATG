COMPILER Tastier

   const int // object kinds
      var = 0, proc = 1, constant = 3;

   const int // types
      undef = 0, integer = 1, boolean = 2, structure = 3;

  const int // sorts
      none = 0, scalar = 1, array = 2;

   public SymbolTable tab;
   public CodeGenerator gen;

/*-------------------------------------------------------------------------------------------*/

CHARACTERS

  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
  digit = "0123456789".
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  stringCh = ANY - '"' - '\\' - cr - lf - tab.
  printableCh = '\u0020' .. '\u007e'.

/*-------------------------------------------------------------------------------------------*/

TOKENS

  number = digit { digit }.
  ident = letter { letter | digit }.
  string = '"' {stringCh | '\\' printableCh} '"'.

/*-------------------------------------------------------------------------------------------*/

COMMENTS FROM "//" TO lf
COMMENTS FROM "/*" TO "*/" NESTED

/*-------------------------------------------------------------------------------------------*/

IGNORE cr + lf + tab

/*-------------------------------------------------------------------------------------------*/

PRODUCTIONS

AddOp<out Op op>
=                        (. op = Op.ADD; .)
  ( '+'
  | '-'                  (. op = Op.SUB; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

Expr<out int reg,        // load value of Expr into register
     out int type>       (. int typeR, regR; Op op; .)
  = SimExpr<out reg,
            out type>
  [ RelOp<out op>
    SimExpr<out regR,
            out typeR>   (.
                            if (type == typeR) {
                               type = boolean;
                               gen.RelOp(op, reg, regR);
                            }
                            else SemErr("incompatible types");
                         .)
   ]                     (. gen.ClearRegisters(); .)
.

/*-------------------------------------------------------------------------------------------*/

Primary<out int reg,     // load Primary into register
        out int type>    (. int n; Obj obj; string name; .)
=                        (.
                            type = undef;
                            reg = gen.GetRegister();
                         .)
  ( Ident<out name>      (.
                            obj = tab.Find(name); type = obj.type;
                            if (obj.kind == var || obj.kind == constant) {
                               if (obj.level == 0)
                                  gen.LoadGlobal(reg, obj.adr, name);
                               else
                                  gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                               if (type == boolean)
                               // reset Z flag in CPSR
                                  gen.ResetZ(reg);
                            }
                            else SemErr("variable expected");
                         .)

  | number               (.
                            type = integer;
                            n = Convert.ToInt32(t.val);
                            gen.LoadConstant(reg, n);
                         .)

  | '-'
    Primary<out reg,
            out type>     (.
                            if (type == integer)
                               gen.NegateValue(reg);
                            else SemErr("integer type expected");
                         .)

  | "true"               (.
                               type = boolean;
                               gen.LoadTrue(reg);
                         .)

  | "false"              (.
                               type = boolean;
                               gen.LoadFalse(reg);
                         .)

  | '('
    Expr<out reg,
         out type>
    ')'

  )
.

/*-------------------------------------------------------------------------------------------*/

Ident<out string name>
= ident                  (. name = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

String<out string text>
= string                  (. text = t.val; .)
.

/*-------------------------------------------------------------------------------------------*/

MulOp<out Op op>
=                        (. op = Op.MUL; .)
  ( '*'
  | ("div" | "DIV")      (. op = Op.DIV; .)
  | ("mod" | "MOD")      (. op = Op.MOD; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

ProcDecl<string progName>
                         (. Obj obj; string procName; .)
= "void"
  Ident<out procName>    (.
                            obj = tab.NewObj(procName, proc, undef,1,0,0, false,"null");
                            if (procName == "main")
                               if (tab.curLevel == 0)
                                  tab.mainPresent = true;
                               else SemErr("main not at lexic level 0");
                            tab.OpenScope();
                         .)
  '(' ')'
  '{'
     {
     ConstantDecl | VarDecl | ArrayDecl
     }
     {
     ProcDecl<progName>
     }                   (.
                            if (procName == "main")
                               gen.Label("Main", "Body");
                            else {
                               gen.ProcNameComment(procName);
                               gen.Label(procName, "Body");
                            }
                         .)
     Stat { Stat }
  '}'                    (.
                            if (procName == "main") {
                               gen.StopProgram(progName);
                               gen.Enter("Main", tab.curLevel, tab.topScope.nextAdr);
                            } else {
                               gen.Return(procName);
                               gen.Enter(procName, tab.curLevel, tab.topScope.nextAdr);
                            }
                            tab.CloseScope();
                         .)
.

/*-------------------------------------------------------------------------------------------*/

RelOp<out Op op>
=                        (. op = Op.EQU; .)
  ( "="
  | '<'                  (. op = Op.LSS; .)
  | '>'                  (. op = Op.GTR; .)
  | "!="                 (. op = Op.NEQ; .)
  | "<="                 (. op = Op.LEQ; .)
  | ">="                 (. op = Op.GEQ; .)
  )
.

/*-------------------------------------------------------------------------------------------*/

SimExpr<out int reg,     //load value of SimExpr into register
        out int type>    (. int typeR, regR; Op op; .)
= Term<out reg,
       out type>
  { AddOp<out op>
    Term<out regR,
         out typeR>      (.
                            if (type == integer && typeR == integer)
                               gen.AddOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Stat                     (. int type; string name; Obj obj; Obj temp;int reg = 0; int index = 0; int index2 = 0; String arrayName; string structName;.)
= Ident<out name>        (. obj = tab.Find(name); .)
  [
    "["
        number           (.
                          index = Convert.ToInt32(t.val);
                          if(index > obj.rows | obj.rows < 0)
                            SemErr("array index rows out of bounds");
                         .)
    "]"
    [
      "["
          number         (.
                           index2 = Convert.ToInt32(t.val);
                           if(index2 > obj.columns | obj.columns < 0)
                             SemErr("array index columns out of bounds");
                         .)
      "]"
    ]
  ]
  [
    '.'
    Ident<out structName>      (.
                                 temp = tab.Find(structName);
                                 if(temp.parent == obj.name){
                                    obj = temp;
                                 }
                                 else{
                                   SemErr("Variable does not belong to this struct");
                                 }
                               .)
  ]

  ( ":="                 (.
                            if (obj.kind == constant)
                               SemErr("cannot assign to constant");
                         .)
                         (.
                            if (obj.type == structure){
                               SemErr("cannot assign to structure variable");
                            }
                         .)
                         (.
                            if (obj.kind != var)
                               SemErr("cannot assign to procedure");
                         .)

    (Expr<out reg,
         out type>       (.
                            if (type == obj.type)
                               if (obj.level == 0)
                                  gen.StoreGlobal(reg, obj.adr + index +(index2*obj.rows), name);
                               else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr + index +(index2*obj.rows), name);
                            else SemErr("incompatible types");
                         .)
     |"["                 (. int rowIndex = 0; int columnIndex = 0; .)
        number            (. rowIndex = Convert.ToInt32(t.val);.)
      "]"
     [
      "["
        number            (. columnIndex = Convert.ToInt32(t.val);.)
      "]"
     ]
     Ident<out arrayName>
                         (.Obj arrayObj = tab.Find(arrayName);

                           if(rowIndex > arrayObj.rows | rowIndex < 0){
                             SemErr("index rows out of bounds");
                           }

                           if(columnIndex > arrayObj.rows | columnIndex < 0){
                             SemErr("index columns out of bounds");
                           }

                           if(arrayObj.type != obj.type){
                             SemErr("Incompatable types");
                           }

                           if (arrayObj.level == 0)
                              gen.LoadGlobal(reg, arrayObj.adr + rowIndex+(columnIndex*arrayObj.rows), arrayName);
                           else gen.LoadLocal(reg, tab.curLevel-arrayObj.level, arrayObj.adr + rowIndex+(columnIndex*arrayObj.rows), arrayName);

                           if (obj.level == 0)
                              gen.StoreGlobal(reg, obj.adr + index +(index2*obj.rows), name);
                           else
                              gen.LoadLocal(reg, tab.curLevel-obj.level, obj.adr + index +(index2*obj.rows), name);
                         .)

      |
        '.'
          Ident<out structName>
                              (. temp = tab.Find(structName);

                                 if(temp.type != obj.type){
                                   SemErr("Incompatable types");
                                 }

                                 if (temp.level == 0)
                                    gen.LoadGlobal(reg, temp.adr, structName);
                                 else gen.LoadLocal(reg, tab.curLevel-obj.level, temp.adr, structName);

                                 if (obj.level == 0)
                                    gen.StoreGlobal(reg, obj.adr, name);
                                 else gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                              .)

    )';'

  | '(' ')' ';'          (.
                            if (obj.kind == proc)
                               gen.Call(name);
                            else SemErr("object is not a procedure");
                         .)
  | "="
    Expr<out reg,
         out type>(.

                             if (obj.kind != constant)
                                SemErr("Must be a constant to use '='");

                             if(obj.hasValue == false){
                                obj.hasValue = true;
                             }
                             else{
                                SemErr("Constant already assigned");
                             }

                             if (obj.level == 0)
                                gen.StoreGlobal(reg, obj.adr, name);
                             else
                                gen.StoreLocal(reg, tab.curLevel-obj.level, obj.adr, name);
                       .)
    ';'
  )

| "switch"              (. int l1, l2, l3; int reg1, reg2; int type1, type2; int check = 0; int errorCheck; .)
  "("
    Expr<out reg1,
         out type1>      (.
                          l3 = 0;
                          l3 = gen.NewLabel();
                        .)
  ")"
  ":"
  {
    "case"              (.
                          l2 = gen.NewLabel();
                          gen.GetRegister();
                          errorCheck = 0;
                        .)
    "("
    Expr<out reg2,
         out type2>     (.
                            if (type1 != type2){
                              SemErr("Types in case must match switch statement");
                            }
                            if(check == 0){
                              gen.RelOp(Op.EQU,reg2,reg1);
                              gen.BranchFalse(l2);
                            }
                        .)
    ")"
    Stat                (.

                        .)
    [
      "continue"        (.
                          check = 1;
                          errorCheck += 1;
                        .)
    ]
    [
      "break"           (.
                          gen.Branch(l3);
                          errorCheck += 1;
                        .)
    ]
                        (.
                          if(errorCheck != 1){
                            SemErr("Must use either a continue or break in switch statement");
                          }
                          gen.Label(l2);
                        .)
  }

  "default"

  Stat       (..)
                        (.
                          gen.Label(l3);
                        .)

| "for"                  (.
                           int l1, l2, l3, l4;
                           l1 = 0;
                           l2 = 0;
                           l3 = 0;
                           l4 = 0;
                         .)
  '('
  Stat                  (.
                          l1 = gen.NewLabel();
                          gen.Label(l1);
                        .)

  Expr<out reg,
       out type>        (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                               l3 = gen.NewLabel();
                               gen.Branch(l3);
                            }
                            else SemErr("boolean type expected");
                        .)
 ';'                    (.
                          l4 = gen.NewLabel();
                          gen.Label(l4);
                        .)

 Stat                   (.
                          gen.Branch(l1);
                          gen.Label(l3);
                        .)
 ')'
 '{'

 Stat                   (.
                          gen.Branch(l4);
                          gen.Label(l2);
                        .)
'}'



| "if"                   (. int l1, l2; l1 = 0; .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l1 = gen.NewLabel();
                               gen.BranchFalse(l1);
                            }
                            else SemErr("boolean type expected");
                         .)
      Stat               (.
                            l2 = gen.NewLabel();
                            gen.Branch(l2);
                            gen.Label(l1);
                         .)
      [ "else"
      Stat
      ]               	 (. gen.Label(l2); .)

| "while"                (.
                            int l1, l2;
                            l1 = gen.NewLabel();
                            gen.Label(l1); l2=0;
                         .)
  Expr<out reg,
       out type>         (.
                            if (type == boolean) {
                               l2 = gen.NewLabel();
                               gen.BranchFalse(l2);
                            }
                            else SemErr("boolean type expected");
                         .)
   Stat                  (.
                            gen.Branch(l1);
                            gen.Label(l2);
                         .)

| "read"
  Ident<out name> ';'    (.
                            obj = tab.Find(name);
                            if (obj.type == integer) {
                               gen.ReadInteger();
                               if (obj.level == 0)
                                  gen.StoreGlobal(0, obj.adr, name);
                               else gen.StoreLocal(0, tab.curLevel-obj.level, obj.adr, name);
                            }
                            else SemErr("integer type expected");
                         .)

| "write"                (. string text; .)
  (
    Expr<out reg,
         out type>       (.
                            switch (type) {
                               case integer: gen.WriteInteger(reg, false);
                                             break;
                               case boolean: gen.WriteBoolean(false);
                                             break;
                            }
                         .)
  | String<out text>     (. gen.WriteString(text); .)
  )
  ';'

| "writeln"
  // note - for strings use write with \n in text
  Expr<out reg,
       out type>           (.
                              switch (type) {
                                 case integer: gen.WriteInteger(reg, true);
                                               break;
                                 case boolean: gen.WriteBoolean(true);
                                               break;
                              }
                           .)
  ';'

| '{'                      (. tab.OpenSubScope(); .)
  { VarDecl | ConstantDecl}
  Stat { Stat }
  '}'                      (. tab.CloseSubScope(); .)
.

/*-------------------------------------------------------------------------------------------*/

Tastier                  (. string progName; .)
  = "program"
  Ident<out progName>    (. tab.OpenScope(); .)
  '{'
    { VarDecl | ConstantDecl | ArrayDecl | StructDecl}          // global variables
    { ProcDecl<progName> }
                         (. tab.CloseScope(); .)
  '}'
.

/*-------------------------------------------------------------------------------------------*/

Term<out int reg,        // load value of Term into register
     out int type>       (. int typeR, regR; Op op; .)
  = Primary<out reg,
            out type>
  { MulOp<out op>
    Primary<out regR,
            out typeR>
                         (.
                            if (type == integer && typeR == integer)
                               gen.MulOp(op, reg, regR);
                            else SemErr("integer type expected");
                         .)
  }
.

/*-------------------------------------------------------------------------------------------*/

Type<out int type>
=                        (. type = undef; .)
 ( "int"                 (. type = integer; .)
 | "bool"                (. type = boolean; .)
 )
.

/*-------------------------------------------------------------------------------------------*/

VarDecl                  (. string name; int type; int sort = 1;.)
= Type<out type>
  Ident<out name>        (. tab.NewObj(name, var, type, sort,0,0,false,"null"); .)
  { ","
    Ident<out name>      (. tab.NewObj(name, var, type, sort,0,0,false,"null"); .)
  } ";"
.

/*-------------------------------------------------------------------------------------------*/

ConstantDecl                (. string name; int type;.)
=
  "const"
  Type<out type>
  Ident<out name>        (. tab.NewObj(name, constant, type,scalar,0,0,false,"null"); .)
  ';'
.

/*-------------------------------------------------------------------------------------------*/

StructDecl               (. string name; string structName; int type; .)
=
  "struct"
  Ident<out structName>        (. tab.NewObj(structName, var, 3, scalar, 0,0,false,"null");  .)
  '{'
    {
      Type<out type>
      Ident<out name>        (. tab.NewObj(name, var, type, 1,0,0,false,structName); .)
      ';'
    }
  '}'
.
/*-------------------------------------------------------------------------------------------*/
ArrayDecl                (. int r; int c = 0; string name; int type;.)
=
  "array"
  Type<out type>
  Ident<out name>
  "["
      number           (.
                          type = integer;
                          r = Convert.ToInt32(t.val);
                          c = 1;
                       .)
  "]"
  [
  "["
      number           (.
                          type = integer;
                          c = Convert.ToInt32(t.val);
                       .)
  "]"
  ]                    (. tab.NewObj(name, var, type,array,r,c,false,"null"); .)
  ";"
.
END Tastier.
